# Load necessary library
library(ggplot2)
library(tidyr)
library(dplyr)

# Define the dataset
data <- data.frame(
  Frequency_comparison = c("250|500", "250|1000", "250|2000", "250|3000", "250|4000", "250|6000", 
                           "250|8000", "500|1000", "500|2000", "500|3000", "500|4000", "500|6000", 
                           "500|8000", "1000|2000", "1000|3000", "1000|4000", "1000|6000", 
                           "1000|8000", "2000|3000", "2000|4000", "2000|6000", "2000|8000", 
                           "3000|4000", "3000|6000", "3000|8000", "4000|6000", "4000|8000", "6000|8000"),
  
  Full_Pedigree_RhoG = c(0.81, 0.62, 0.66, 0.45, 0.53, 0.19, 
                         0.32, 0.80, 0.82, 0.56, 0.54, 0.14, 
                         0.31, 0.78, 0.55, 0.51, -0.05, 
                         0.12, 0.53, 0.53, 0.04, 0.16, 
                         0.72, 0.50, 0.55, 0.70, 0.66, 0.82),
  
  Full_Pedigree_SE = c(0.08, 0.11, 0.10, 0.07, 0.07, 0.08, 
                       0.08, 0.07, 0.07, 0.07, 0.07, 0.08, 
                       0.06, 0.08, 0.09, 0.10, 0.09, 
                       0.11, 0.13, 0.09, 0.08, 0.09, 
                       0.10, 0.08, 0.10, 0.10, 0.13, 0.08),
  
  Parent_offspring_RhoG = c(0.84, 0.61, 0.71, 0.45, 0.52, 0.12, 
                            0.25, 0.77, 0.82, 0.53, 0.50, 0.06, 
                            0.25, 0.76, 0.50, 0.51, -0.14, 
                            0.00, 0.55, 0.62, 0.05, 0.13, 
                            0.75, 0.50, 0.57, 0.65, 0.56, 0.80),
  
  Parent_offspring_SE = c(0.07, 0.09, 0.07, 0.09, 0.09, 0.09, 
                          0.10, 0.08, 0.06, 0.09, 0.09, 0.10, 
                          0.10, 0.10, 0.09, 0.09, 0.11, 
                          0.12, 0.08, 0.08, 0.10, 0.11, 
                          0.06, 0.09, 0.09, 0.07, 0.09, 0.09),
  
  Siblings_RhoG = c(0.86, 0.64, 0.73, 0.55, 0.54, 0.09, 
                    0.25, 0.80, 0.85, 0.56, 0.55, 0.15, 
                    0.31, 0.79, 0.59, 0.42, -0.22, 
                    0.05, 0.64, 0.62, 0.12, 0.16, 
                    0.74, 0.51, 0.67, 0.60, 0.58, 0.83),
  
  Siblings_SE = c(0.07, 0.08, 0.09, 0.08, 0.09, 0.13, 
                  0.11, 0.05, 0.08, 0.09, 0.09, 0.11, 
                  0.11, 0.07, 0.09, 0.10, 0.11, 
                  0.12, 007, 0.08, 0.10, 0.11, 
                  0.09, 0.10, 0.09, 0.11, 0.09, 0.12)
)

# Display the updated data frame
print(data)


# Calculate the confidence intervals
z_value <- 1.96  # For 95% confidence

data <- data %>%
  mutate(
    Full_Pedigree_CI_lower = Full_Pedigree_RhoG - z_value * Full_Pedigree_SE,
    Full_Pedigree_CI_upper = Full_Pedigree_RhoG + z_value * Full_Pedigree_SE,
    Parent_offspring_CI_lower = Parent_offspring_RhoG - z_value * Parent_offspring_SE,
    Parent_offspring_CI_upper = Parent_offspring_RhoG + z_value * Parent_offspring_SE,
    Siblings_CI_lower = Siblings_RhoG - z_value * Siblings_SE,
    Siblings_CI_upper = Siblings_RhoG + z_value * Siblings_SE
  )


# Reshape the data for plotting
# Reshape the data to long format for plotting
ci_data <- data %>%
  select(Frequency_comparison, 
         Full_Pedigree_RhoG, Full_Pedigree_CI_lower, Full_Pedigree_CI_upper,
         Parent_offspring_RhoG, Parent_offspring_CI_lower, Parent_offspring_CI_upper,
         Siblings_RhoG, Siblings_CI_lower, Siblings_CI_upper) %>%
  pivot_longer(
    cols = c(Full_Pedigree_RhoG, Parent_offspring_RhoG, Siblings_RhoG), 
    names_to = "Relation", values_to = "RhoG"
  ) %>%
  mutate(CI_lower = case_when(
    Relation == "Full_Pedigree_RhoG" ~ Full_Pedigree_CI_lower,
    Relation == "Parent_offspring_RhoG" ~ Parent_offspring_CI_lower,
    Relation == "Siblings_RhoG" ~ Siblings_CI_lower
  ),
  CI_upper = case_when(
    Relation == "Full_Pedigree_RhoG" ~ Full_Pedigree_CI_upper,
    Relation == "Parent_offspring_RhoG" ~ Parent_offspring_CI_upper,
    Relation == "Siblings_RhoG" ~ Siblings_CI_upper
  )) %>%
  mutate(Relation = recode(Relation,
                           "Full_Pedigree_RhoG" = "Full Pedigree",
                           "Parent_offspring_RhoG" = "Parent-offspring",
                           "Siblings_RhoG" = "Siblings"))

# Function to create forest plot for a single frequency comparison
plot_forest <- function(data, frequency_comparison) {
  ggplot(data %>% filter(Frequency_comparison == frequency_comparison), 
         aes(x = RhoG, y = Relation, xmin = CI_lower, xmax = CI_upper, 
             linetype = Relation, size = Relation)) +
    geom_pointrange() +
    coord_flip() +  # Flips the axes so that CI is on the x-axis
    labs(title = paste("Forest Plot for", frequency_comparison),
         x = "Genetic Correlation", y = "Relationship") +
    scale_size_manual(values = c(0.5, 0.5, 0.5)) +  # Different line thicknesses
    scale_linetype_manual(values = c("solid", "dashed", "dotted")) +  # Different line styles
    theme_minimal() +
    theme(legend.position = "none")  # Hides the legend for a cleaner look
}

# Create plots for each frequency comparison
plots <- lapply(unique(ci_data$Frequency_comparison), function(freq) {
  plot_forest(ci_data, freq)
})

# Print all the plots
for (p in plots) {
  print(p)
}

# Function to create forest plot for a single frequency comparison
plot_forest <- function(data, frequency_comparison) {
  ggplot(data %>% filter(Frequency_comparison == frequency_comparison), 
         aes(y = Relation, x = RhoG, xmin = CI_lower, xmax = CI_upper, 
             linetype = Relation, size = Relation)) +
    geom_pointrange() +
    geom_vline(xintercept = 0, linetype = "dashed", color = "red") +  # Add a vertical line at x = 0
    labs(title = paste(frequency_comparison, "(Hz)"),
         x = "", y = "") +
    scale_size_manual(values = c(0.5, 0.5, 0.5)) +  # Different line thicknesses
    scale_linetype_manual(values = c("solid", "dashed", "dotted")) +  # Different line styles
    theme_minimal() +
    theme(legend.position = "none",  # Hides the legend for a cleaner look
          plot.title = element_text(hjust = 0.5, face = "bold"))  # Centered and bold title
}

# Generate the individual plots
plots <- lapply(unique(ci_data$Frequency_comparison), function(freq) {
  plot_forest(ci_data, freq)
})

# Combine the plots into one figure using gridExtra
combined_plot <- grid.arrange(grobs = plots, ncol = )  # Arrange in a grid, e.g., 2 columns

# Save the combined plot to a file
ggsave("combined_forest_plot.png", combined_plot, width = 12, height = 30, dpi = 300)

# Display the combined plot
print(combined_plot)

```

